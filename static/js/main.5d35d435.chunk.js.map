{"version":3,"sources":["components/Form.js","components/Todo.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Form","setInputText","todos","setTodos","inputText","setStatus","value","onChange","e","console","log","target","type","className","onClick","preventDefault","text","completed","id","Math","random","name","Todo","todo","map","item","filter","el","TodoList","filteredTodos","key","App","useState","status","setFilteredTodods","useEffect","getLocalTodos","filterHandler","saveLocalTodos","localStorage","setItem","JSON","stringify","getItem","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5d35d435.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Form = ({ setInputText, todos, setTodos, inputText, setStatus }) => {\r\n\t// Here i can write js code and fx \r\n\tconst inputTextHandler = (e) => {\r\n\t\tconsole.log(e.target.value);\r\n\t\tsetInputText(e.target.value);\r\n\t};\r\n\tconst submitTodoHandler = (e) => {\r\n\t\te.preventDefault();\r\n\t\tsetTodos([\r\n\t\t\t...todos,\r\n\t\t\t{ text: inputText, completed: false, id: Math.random() * 1000 },\r\n\t\t]);\r\n\t\tsetInputText(\"\");\r\n\t};\r\n\tconst statusHandler = (e) => {\r\n\t\tsetStatus(e.target.value);\r\n\t\tconsole.log(e.target.value);\r\n\t}\r\n\treturn (\r\n\t\t<form>\r\n\t\t\t<input\r\n\t\t\t\tvalue={inputText}\r\n\t\t\t\tonChange={inputTextHandler}\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tclassName=\"todo-input\"\r\n\t\t\t/>\r\n\t\t\t<button onClick={submitTodoHandler} className=\"todo-button\" type=\"submit\">\r\n\t\t\t\t<i className=\"fas fa-plus-square\"></i>\r\n\t\t\t</button>\r\n\t\t\t<div className=\"select\">\r\n\t\t\t\t<select onChange={statusHandler} name=\"todos\" className=\"filter-todo\">\r\n\t\t\t\t\t<option value=\"all\">All</option>\r\n\t\t\t\t\t<option value=\"completed\">Completed</option>\r\n\t\t\t\t\t<option value=\"uncompleted\">Uncompleted</option>\r\n\t\t\t\t</select>\r\n\t\t\t</div>\r\n\t\t</form>\r\n\r\n\r\n\t);\r\n};\r\n\r\nexport default Form","import React from 'react';\r\n\r\n\r\nconst Todo = ({ text, todo, todos, setTodos }) => {\r\n\r\n\t// Events\r\n\tconst deleteHandler = () => {\r\n\t\tsetTodos(todos.filter((el) => el.id !== todo.id));\r\n\t};\r\n\r\n\tconst completeHandler = () => {\r\n\t\tsetTodos(todos.map(item => {\r\n\t\t\tif (item.id === todo.id) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\t...item, completed: !item.completed\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\treturn item;\r\n\t\t})\r\n\t\t);\r\n\t};\r\n\treturn (\r\n\t\t<div className=\"todo\">\r\n\t\t\t<li className={`todo-item ${todo.completed ? \"completed\" : \"\"}`}>{text}</li>\r\n\t\t\t<button onClick={completeHandler} className=\"complete-btn\">\r\n\t\t\t\t<i className=\"fas fa-check\"> </i>\r\n\t\t\t</button>\r\n\t\t\t<button onClick={deleteHandler} className=\"trash-btn\">\r\n\t\t\t\t<i className=\"fas fa-trash\"> </i>\r\n\t\t\t</button>\r\n\t\t</div>\r\n\r\n\t);\r\n};\r\n\r\nexport default Todo;","import React from \"react\";\r\n//Import components\r\nimport Todo from './Todo.js';\r\n\r\n\r\nconst TodoList = ({ todos, setTodos, filteredTodos }) => {\r\n\r\n\r\n\treturn (\r\n\t\t<div className=\"todo-container\">\r\n\t\t\t<ul className=\"todo-list\">\r\n\t\t\t\t{filteredTodos.map(todo => (\r\n\t\t\t\t\t<Todo\r\n\t\t\t\t\t\tsetTodos={setTodos}\r\n\t\t\t\t\t\ttodos={todos}\r\n\t\t\t\t\t\tkey={todo.id}\r\n\t\t\t\t\t\ttodo={todo}\r\n\t\t\t\t\t\ttext={todo.text}\r\n\t\t\t\t\t\tid={todo.id}\r\n\t\t\t\t\t/>\r\n\r\n\t\t\t\t))}\r\n\t\t\t</ul>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default TodoList;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Form from './components/Form';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n\n\t//State stuff\n\tconst [inputText, setInputText] = useState(\"\");\n\tconst [todos, setTodos] = useState([]);\n\tconst [status, setStatus] = useState(\"all\");\n\tconst [filteredTodos, setFilteredTodods] = useState([]);\n\n\t//RUN ONCE\n\tuseEffect(() => {\n\t\tgetLocalTodos();\n\t}, []);\n\n\t//USE EFFECT \n\tuseEffect(() => {\n\t\tfilterHandler();\n\t\tsaveLocalTodos();\n\t}, [todos, status]);\n\n\t//Functions \n\tconst filterHandler = () => {\n\t\tswitch (status) {\n\t\t\tcase 'completed':\n\t\t\t\tsetFilteredTodods(todos.filter(todo => todo.completed = true));\n\t\t\t\tbreak;\n\t\t\tcase 'uncompleted':\n\t\t\t\tsetFilteredTodods(todos.filter(todo => todo.completed = false));\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tsetFilteredTodods(todos);\n\t\t\t\tbreak;\n\t\t}\n\t};\n\n\t// Save to local \n\tconst saveLocalTodos = () => {\n\t\tlocalStorage.setItem(\"todos\", JSON.stringify(todos));\n\t};\n\n\tconst getLocalTodos = () => {\n\t\tif (localStorage.getItem('todos') === null) {\n\t\t\tlocalStorage.setItem('todos', JSON.stringify([]));\n\t\t} else {\n\t\t\tlocalStorage.setItem(\"todos\", JSON.stringify(todos));\n\t\t}\n\t}\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<header>\n\t\t\t\t<h1> TODO APP IN REACT JS </h1>\n\t\t\t</header>\n\t\t\t<Form\n\t\t\t\tinputText={inputText}\n\t\t\t\ttodos={todos}\n\t\t\t\tsetTodos={setTodos}\n\t\t\t\tsetInputText={setInputText}\n\t\t\t\tsetStatus={setStatus}\n\t\t\t/>\n\t\t\t<TodoList\n\t\t\t\tfilteredTodos={filteredTodos}\n\t\t\t\tsetTodos={setTodos}\n\t\t\t\ttodos={todos} />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}